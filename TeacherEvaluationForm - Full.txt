import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: MyApp(),
    );
  }
}

class MyForm extends StatefulWidget {
  @override
  _MyFormState createState() => _MyFormState();
}

class _MyFormState extends State<MyForm> {
  final _formKey = GlobalKey<FormState>();
  String name = '';
  String icno = '';
  String selectedGender = 'Male';
  String area = 'KSSR';
  String position = '';
  String date = '';

  final List<Tab> tabs = <Tab>[
    Tab(text: 'Informasi Guru\nPersonal Info'),
    Tab(text: 'PDP'),
    Tab(text: 'Program Sekolah\nSchool Activity'),
    Tab(text: 'Tarbiyyah'),
    Tab(text: 'Peningkatan Diri\nSelf-Improvement'),
    Tab(text: 'Penglibatan Luar\nExternal Engagement'),
  ];

  final List<Widget> tabPages = <Widget>[
    PersonalInfoTab(),
    PdpTab(),
    SchoolActivityTab(),
    TarbiyyahTab(),
    SelfImprovementTab(),
    ExternalEngagementTab(),
    WelfareActivityTab(),
  ];

  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: tabs.length,
      child: Scaffold(
        appBar: AppBar(
          title: Text('Borang Keberhasilan Guru Bulanan'),
          bottom: TabBar(
            tabs: tabs,
          ),
        ),
        body: TabBarView(
          children: tabPages,
        ),
        floatingActionButton: ElevatedButton(
          onPressed: () {
            if (_formKey.currentState != null && _formKey.currentState!.validate()) {
              _formKey.currentState?.save();
              print('Nama/Name: $name, IC NO/IC Number: $icno, Gender: $selectedGender, ');
              print('Bidang/Area: $area, Jawatan/Position: $position, Tarikh/Date: $date');
            }
          },
          child: Text('Submit'),
        ),
      ),
    );
  }
}

class PersonalInfoTab extends StatefulWidget {

  @override
  _PersonalInfoTabState createState() => _PersonalInfoTabState();
}

class _PersonalInfoTabState extends State<PersonalInfoTab> {
  final _formKey = GlobalKey<FormState>();
  String name = '';
  String icno = '';
  String selectedGender = 'Male';
  String area = 'KSSR';
  String position = '';
  String date = '';

  @override
  Widget build(BuildContext context) {
    return Form(
      key: _formKey,
      child: ListView(
        children: [
          TextFormField(
            decoration: InputDecoration(labelText: 'Nama/Name'),
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Please enter your name';
              }
              return null;
            },
            onSaved: (value) {
              name = value ?? '';
            },
          ),
          TextFormField(
            decoration: InputDecoration(labelText: 'IC No/IC Number'),
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Please enter your IC Number';
              }
              return null;
            },
            onSaved: (value) {
              icno = value ?? '';
            },
          ),
          DropdownButton<String>(
            value: selectedGender,
            onChanged: (value) {
              setState(() {
                selectedGender = value ?? 'Male';
              });
            },
            items: <String>['Male', 'Female']
                .map((String value) {
              return DropdownMenuItem<String>(
                value: value,
                child: Text(value),
              );
            }).toList(),
          ),
          TextFormField(
            decoration: InputDecoration(labelText: 'Bidang/Area'),
            onSaved: (value) {
              setState(() {
                area = value ?? 'KSSR';
              });
            },
          ),
          TextFormField(
            decoration: InputDecoration(labelText: 'Jawatan/Position'),
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Please enter your Position';
              }
              return null;
            },
            onSaved: (value) {
              position = value ?? '';
            },
          ),
          TextFormField(
            decoration: InputDecoration(labelText: 'Tarikh/Date'),
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Please enter the Date';
              }
              return null;
            },
            onSaved: (value) {
              date = value ?? '';
            },
          ),
        ],
      ),
    );
  }
}


class PdpQuestionFormField extends StatelessWidget {
  final String question;
  final void Function(String?)? onSaved;

  const PdpQuestionFormField({
    required this.question,
    this.onSaved,
  });

  @override
  Widget build(BuildContext context) {
    return TextFormField(
      decoration: InputDecoration(labelText: question),
      validator: (value) {
        if (value == null || value.isEmpty) {
          return 'Please provide an answer';
        }
        return null;
      },
      onSaved: onSaved,
    );
  }
}

class PdpTab extends StatefulWidget {
  @override
  _PdpTabState createState() => _PdpTabState();
}

class _PdpTabState extends State<PdpTab> {
  final _formKey = GlobalKey<FormState>();
  Map<String, String> answers = {};

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              PdpQuestionFormField(
                question: 'Mencapai sekurang-kurangnya 85% penghantaran PDPC.',
                onSaved: (String? value) {
                  answers['m1'] = value ?? '';
                },
              ),
              PdpQuestionFormField(
                question: 'Menyediakan sekurang-kurangnya satu Bahan Bantu Mengajar BBM dalam setahun.',
                onSaved: (String? value) {
                  answers['m2'] = value ?? '';
                },
              ),
              PdpQuestionFormField(
                question: 'Mempelajari sekurang-kurangnya satu kemahiran baru dan dapat mengamalkan di dalam PDPC. ',
                onSaved: (String? value) {
                  answers['m3'] = value ?? '';
                },
              ),
              ElevatedButton(
                onPressed: () {
                  if (_formKey.currentState != null &&
                      _formKey.currentState!.validate()) {
                    _formKey.currentState!.save();

                    // Calculate the total based on answers
                    int total = 0;
                    answers.forEach((key, value) {
                      // Assuming the answer represents a numerical value
                      if (int.tryParse(value) != null) {
                        total += int.parse(value);
                      }
                    });

                    double average = total / answers.length;

                    // Do something with the answers
                    print('Total marks for PDP: $total marks.');
                    print('Average marks for PDP: $average marks.');
                  }
                },
                child: Text('Save'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


class SchoolActivityFormField extends StatelessWidget {
  final String question;
  final void Function(String?)? onSaved;

  const SchoolActivityFormField({
    required this.question,
    this.onSaved,
  });

  @override
  Widget build(BuildContext context) {
    return TextFormField(
      decoration: InputDecoration(labelText: question),
      validator: (value) {
        if (value == null || value.isEmpty) {
          return 'Please provide an answer';
        }
        return null;
      },
      onSaved: onSaved,
    );
  }
}

class SchoolActivityTab extends StatefulWidget {
  @override
  _SchoolActivityState createState() => _SchoolActivityState();
}

class _SchoolActivityState extends State<SchoolActivityTab> {
  final _formKey = GlobalKey<FormState>();
  Map<String, String> answers = {};

  @override
  Widget build(BuildContext context) {
      return Scaffold(
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              SchoolActivityFormField(
                question: 'Mengurus 80 % pelaksanaan matapelajaran dengan menyelaras pentaksiran & tugasan murid.',
                onSaved: (String? value) {
                  answers['m1'] = value ?? '';
                },
              ),
              SchoolActivityFormField(
                question: 'Mengurus 1 program peningkatan pencapaian murid  ( Contoh : program pemantapan Bahasa Inggeris).',
                onSaved: (String? value) {
                  answers['m2'] = value ?? '';
                },
              ),
              SchoolActivityFormField(
                question: 'Mengurus 2 program peningkatan pencapaian guru subjek dibawahnya : sediakan kursus yang diperlukan oleh guru subjek. ',
                onSaved: (String? value) {
                  answers['m3'] = value ?? '';
                },
              ),
              SchoolActivityFormField(
                question: 'Manfaatkan 90% belanjawan kurikulum dalam subjek panitia dengan membeli ( cth : rim kertas a4, kertas laminate, buku membaca,buku rujukan guru).',
                onSaved: (String? value) {
                  answers['m4'] = value ?? '';
                },
              ),
              SchoolActivityFormField(
                question: 'Melaksanakan sekurang-kurangnya 80% tugasan panitia. ',
                onSaved: (String? value) {
                  answers['m5'] = value ?? '';
                },
              ),
              SchoolActivityFormField(
                question: 'Berjumpa 2 kali dengan guru baru untuk bantuan dalam mengajar subjek Bahasa Inggeris (awal dan akhir tahun). ',
                onSaved: (String? value) {
                  answers['m6'] = value ?? '';
                },
              ),
              ElevatedButton(
                onPressed: () {
                  if (_formKey.currentState != null &&
                      _formKey.currentState!.validate()) {
                    _formKey.currentState!.save();

                    // Calculate the total based on answers
                    int total = 0;
                    answers.forEach((key, value) {
                      // Assuming the answer represents a numerical value
                      if (int.tryParse(value) != null) {
                        total += int.parse(value);
                      }
                    });

                    double average = total / answers.length;

                    // Do something with the answers
                    print('Total marks for School Activity: $total marks.');
                    print('Average marks for School Activity: $average marks.');
                  }
                },
                child: Text('Save'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


class TarbiyyahFormField extends StatelessWidget {
  final String question;
  final void Function(String?)? onSaved;

  const TarbiyyahFormField({
    required this.question,
    this.onSaved,
  });

  @override
  Widget build(BuildContext context) {
    return TextFormField(
      decoration: InputDecoration(labelText: question),
      validator: (value) {
        if (value == null || value.isEmpty) {
          return 'Please provide an answer';
        }
        return null;
      },
      onSaved: onSaved,
    );
  }
}

class TarbiyyahTab extends StatefulWidget {
  @override
  _TarbiyyahTabState createState() => _TarbiyyahTabState();
}

class _TarbiyyahTabState extends State<TarbiyyahTab> {
  final _formKey = GlobalKey<FormState>();
  Map<String, String> answers = {};

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TarbiyyahFormField(
                question: 'Mencapai sekurang-kurangnya 90% kehadiran ke usrah fizikal/online.',
                onSaved: (String? value) {
                  answers['m1'] = value ?? '';
                },
              ),
              TarbiyyahFormField(
                question: 'Mencapai sekurang-kurangnya 25% kehadiran ke wasilah usrah fizikal/online.',
                onSaved: (String? value) {
                  answers['m2'] = value ?? '';
                },
              ),
              ElevatedButton(
                onPressed: () {
                  if (_formKey.currentState != null &&
                      _formKey.currentState!.validate()) {
                    _formKey.currentState!.save();

                    // Calculate the total based on answers
                    int total = 0;
                    answers.forEach((key, value) {
                      // Assuming the answer represents a numerical value
                      if (int.tryParse(value) != null) {
                        total += int.parse(value);
                      }
                    });

                    double average = total / answers.length;

                    // Do something with the answers
                    print('Total marks for Tarbiyyah: $total marks.');
                    print('Average marks for Tarbiyyah: $average marks.');
                  }
                },
                child: Text('Save'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


class SelfImprovementFormField extends StatelessWidget {
  final String question;
  final void Function(String?)? onSaved;

  const SelfImprovementFormField({
    required this.question,
    this.onSaved,
  });

  @override
  Widget build(BuildContext context) {
    return TextFormField(
      decoration: InputDecoration(labelText: question),
      validator: (value) {
        if (value == null || value.isEmpty) {
          return 'Please provide an answer';
        }
        return null;
      },
      onSaved: onSaved,
    );
  }
}

class SelfImprovementTab extends StatefulWidget {
  @override
  _SelfImprovementTabState createState() => _SelfImprovementTabState();
}

class _SelfImprovementTabState extends State<SelfImprovementTab> {
  final _formKey = GlobalKey<FormState>();
  Map<String, String> answers = {};

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              SelfImprovementFormField(
                question: 'Menyertai 1 kursus luar sekolah contoh : kursus eduoasis yang berkaitan dengan subjek diajar.',
                onSaved: (String? value) {
                  answers['m1'] = value ?? '';
                },
              ),
              SelfImprovementFormField(
                question: 'Menjadi 1 kali sekurang2 nya sukarela tenaga pengajar sukan apabila kesihatan mengizinkan.',
                onSaved: (String? value) {
                  answers['m2'] = value ?? '';
                },
              ),
              ElevatedButton(
                onPressed: () {
                  if (_formKey.currentState != null &&
                      _formKey.currentState!.validate()) {
                    _formKey.currentState!.save();

                    // Calculate the total based on answers
                    int total = 0;
                    answers.forEach((key, value) {
                      // Assuming the answer represents a numerical value
                      if (int.tryParse(value) != null) {
                        total += int.parse(value);
                      }
                    });

                    double average = total / answers.length;

                    // Do something with the answers
                    print('Total marks for Tarbiyyah: $total marks.');
                    print('Average marks for Tarbiyyah: $average marks.');
                  }
                },
                child: Text('Save'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


class ExternalEngagementFormField extends StatelessWidget {
  final String question;
  final void Function(String?)? onSaved;

  const ExternalEngagementFormField({
    required this.question,
    this.onSaved,
  });

  @override
  Widget build(BuildContext context) {
    return TextFormField(
      decoration: InputDecoration(labelText: question),
      validator: (value) {
        if (value == null || value.isEmpty) {
          return 'Please provide an answer';
        }
        return null;
      },
      onSaved: onSaved,
    );
  }
}

class ExternalEngagementTab extends StatefulWidget {
  @override
  _ExternalEngagementTabState createState() => _ExternalEngagementTabState();
}

class _ExternalEngagementTabState extends State<ExternalEngagementTab> {
  final _formKey = GlobalKey<FormState>();
  Map<String, String> answers = {};

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              ExternalEngagementFormField(
                question: ' Menyertai program luar sekolah di luar waktu persekolahan.',
                onSaved: (String? value) {
                  answers['m1'] = value ?? '';
                },
              ),
              ExternalEngagementFormField(
                question: ' Membawa murid dalam sebarang pertandingan atau persembahan luar sekolah.',
                onSaved: (String? value) {
                  answers['m2'] = value ?? '';
                },
              ),
              ElevatedButton(
                onPressed: () {
                  if (_formKey.currentState != null &&
                      _formKey.currentState!.validate()) {
                    _formKey.currentState!.save();

                    // Calculate the total based on answers
                    int total = 0;
                    answers.forEach((key, value) {
                      // Assuming the answer represents a numerical value
                      if (int.tryParse(value) != null) {
                        total += int.parse(value);
                      }
                    });

                    double average = total / answers.length;

                    // Do something with the answers
                    print('Total marks for Tarbiyyah: $total marks.');
                    print('Average marks for Tarbiyyah: $average marks.');
                  }
                },
                child: Text('Save'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


class WelfareActivityFormField extends StatelessWidget {
  final String question;
  final void Function(String?)? onSaved;

  const WelfareActivityFormField({
    required this.question,
    this.onSaved,
  });

  @override
  Widget build(BuildContext context) {
    return TextFormField(
      decoration: InputDecoration(labelText: question),
      validator: (value) {
        if (value == null || value.isEmpty) {
          return 'Please provide an answer';
        }
        return null;
      },
      onSaved: onSaved,
    );
  }
}

class WelfareActivityTab extends StatefulWidget {
  @override
  _WelfareActivityTabState createState() => _WelfareActivityTabState();
}

class _WelfareActivityTabState extends State<WelfareActivityTab> {
  final _formKey = GlobalKey<FormState>();
  String activity = '';

  @override
  Widget build(BuildContext context) {
    return Form(
      key: _formKey,
      child: ListView(
        children: [
          WelfareActivityFormField(
            question: 'Kindly write down any related activities:',
            onSaved: (value) {
              activity = value ?? '';
            },
          ),
          ElevatedButton(
            onPressed: () {
              if (_formKey.currentState != null && _formKey.currentState!.validate()) {
                _formKey.currentState!.save();

                // Do something with the saved data
                print('Welfare Activity: $activity');
              }
            },
            child: Text('Save'),
          ),
        ],
      ),
    );
  }
}
